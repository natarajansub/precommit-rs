name: Build & Bundle

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-and-bundle:
    name: Build & Bundle on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (release)
        run: cargo build --release

      - name: Install cargo-bundle
        run: cargo install cargo-bundle --locked --force

      - name: Install platform prerequisites (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y nsis

      - name: Ensure NSIS is available (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          where makensis || echo "makensis not found"

      - name: Install platform prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xz-utils libfuse2 ca-certificates
          # Download appimagetool
          wget -O appimagetool.tar.xz https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool.tar.xz
          mv appimagetool.tar.xz /usr/local/bin/appimagetool
          ls -la /usr/local/bin/appimagetool || true

      - name: Run cargo-bundle (best-effort)
        shell: bash
        run: |
          set -o pipefail || true
          cargo bundle --release 2>&1 | tee bundle.log || true

      - name: Attempt to build AppImage from bundle (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if [ -d target/release/bundle/linux ]; then
            /usr/local/bin/appimagetool target/release/bundle/linux || true
          else
            echo "No linux bundle dir found"
          fi

      - name: Capture presence of changelog
        shell: bash
        run: |
          if [ -f PRECOMMIT_CHANGELOG.md ]; then echo "changelog_present=true" >> $GITHUB_OUTPUT; else echo "changelog_present=false" >> $GITHUB_OUTPUT; fi
        id: changelog_check

      - name: List bundle output
        shell: bash
        run: |
          echo "-- target/release --"
          ls -la target/release || true
          echo "-- target/release/bundle --"
          ls -la target/release/bundle || true
          echo "-- dist --"
          ls -la dist || true

      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: precommit-rs-bundles-${{ matrix.os }}
          path: |
            target/release/bundle
            dist
            target/release/*.dmg
            target/release/*.AppImage
            target/release/*.exe
            target/release/*.msi
            target/release/*.nsis
            target/release/*.zip
            bundle.log

      - name: Upload PRECOMMIT_CHANGELOG (if present)
        if: ${{ steps.changelog_check.outputs.changelog_present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: precommit-changelog-${{ matrix.os }}
          path: PRECOMMIT_CHANGELOG.md

  create-release:
    name: Create GitHub Release and attach bundles
    needs: build-and-bundle
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux bundle artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: precommit-rs-bundles-ubuntu-latest
          path: artifacts/ubuntu

      - name: Download macOS bundle artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: precommit-rs-bundles-macos-latest
          path: artifacts/macos

      - name: Download Windows bundle artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: precommit-rs-bundles-windows-latest
          path: artifacts/windows

      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "Artifacts:"
          ls -la artifacts || true
          ls -la artifacts/ubuntu || true
          ls -la artifacts/macos || true
          ls -la artifacts/windows || true

      # Download changelogs if they exist
      - name: List available artifacts
        id: artifact-list
        shell: bash
        run: |
          echo "Looking for changelog artifacts..."
          # GitHub CLI is pre-installed on runners
          artifacts=$(gh api /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[].name' || echo "")
          echo "Available artifacts:"
          echo "$artifacts"
          echo "artifacts_list<<EOF" >> $GITHUB_OUTPUT
          echo "$artifacts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download changelog artifacts
        if: contains(steps.artifact-list.outputs.artifacts_list, 'precommit-changelog-')
        uses: actions/download-artifact@v4
        with:
          pattern: precommit-changelog-*
          path: artifacts/changelog
          merge-multiple: true

      - name: Prepare release body
        shell: bash
        run: |
          echo "Preparing release notes..."
          if [ -f "artifacts/changelog/PRECOMMIT_CHANGELOG.md" ]; then
            echo "Found changelog"
            cat "artifacts/changelog/PRECOMMIT_CHANGELOG.md" > release_body.md
          else
            echo "No changelog found"
            echo "Auto-built release for precommit-rs (run $GITHUB_RUN_NUMBER)" > release_body.md
          fi

      - name: Verify release assets
        shell: bash
        run: |
          echo "Files available for release:"
          for dir in target/release/bundle/*/ ; do
            if [ -d "$dir" ]; then
              echo "Contents of $dir:"
              ls -la "$dir"
            fi
          done
          
          # Create a directory for collected release assets
          mkdir -p release-assets
          
          # Copy only existing files that match our patterns
          for pattern in \
            "target/release/bundle/windows/*.exe" \
            "target/release/bundle/windows/*.msi" \
            "target/release/bundle/macos/*.app" \
            "target/release/bundle/macos/*.dmg" \
            "target/release/bundle/linux/*.AppImage"; do
            for f in $pattern; do
              if [ -f "$f" ]; then
                echo "Found release asset: $f"
                cp "$f" release-assets/
              fi
            done
          done
          
          echo "Final release assets:"
          ls -la release-assets/

      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          # Extract version from Cargo.toml
          version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Version from Cargo.toml: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          
          # Check if this tag already exists
          if gh release view "v$version" &>/dev/null; then
            echo "Release v$version already exists. Adding build number suffix."
            version="${version}-build.${{ github.run_number }}"
          fi
          echo "final_version=$version" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.final_version }}
          name: precommit-rs v${{ steps.get_version.outputs.final_version }}
          body_path: release_body.md
          files: release-assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Optional macOS signing (if enabled)
        if: runner.os == 'macOS'
        env:
          MAC_SIGNING_P12: ${{ secrets.MAC_SIGNING_P12 }}
          MAC_SIGNING_PASSWORD: ${{ secrets.MAC_SIGNING_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail

          if [ -z "$MAC_SIGNING_P12" ] || [ -z "$MAC_SIGNING_PASSWORD" ]; then
            echo "Skipping macOS signing because MAC_SIGNING_P12 or MAC_SIGNING_PASSWORD is not set."
            exit 0
          fi

          echo "Decoding P12..."
          echo "$MAC_SIGNING_P12" | base64 --decode > /tmp/mac_signing.p12

          KEYCHAIN="build-signing-keychain"
          KEYCHAIN_PWD="temporary-password"

          echo "Creating temporary keychain $KEYCHAIN"
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"
          security set-keychain-settings -lut 3600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN"

          echo "Importing P12 into keychain"
          security import /tmp/mac_signing.p12 -k "$KEYCHAIN" -P "$MAC_SIGNING_PASSWORD" -T /usr/bin/codesign || true

          # Find identity
          IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN" | awk '/\"/ {print $2; exit}' | tr -d '"') || true
          if [ -z "$IDENTITY" ]; then
            echo "No signing identity found in the imported P12. Cleaning up and exiting."
            security delete-keychain "$KEYCHAIN" || true
            exit 0
          fi

          echo "Found identity: $IDENTITY"

          # Codesign any .app produced by the bundle
          APP_DIRS=(target/release/bundle/macos/*.app target/release/bundle/macos/*/*.app)
          signed_any=false
          for pattern in "${APP_DIRS[@]}"; do
            for app in $pattern; do
              if [ -d "$app" ]; then
                echo "Codesigning $app"
                /usr/bin/codesign --deep --force --verbose --options runtime -s "$IDENTITY" "$app" || true
                /usr/bin/codesign --verify --deep --strict --verbose=2 "$app" || true
                signed_any=true
              fi
            done
          done

          if [ "$signed_any" = false ]; then
            echo "No .app bundles found to sign; skipping codesign step."
          fi

          echo "Cleaning up keychain"
          security delete-keychain "$KEYCHAIN" || true
          rm -f /tmp/mac_signing.p12
